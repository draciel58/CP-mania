/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        queue<pair<TreeNode*,int> > q; 
        q.push(make_pair(root,0));
        map<int,vector<pair<int,int> > > mp;
        mp[0].push_back(make_pair(0,root->val));
        int y=1;
        while(!q.empty()){
            int l = q.size();
            for(int i=0;i<l;i++){
                TreeNode* temp = q.front().first;
                int x = q.front().second;
                q.pop();
                if(temp->left){
                    mp[x-1].push_back(make_pair(y,temp->left->val));
                    q.push(make_pair(temp->left,x-1));
                }
                if(temp->right){
                    mp[x+1].push_back(make_pair(y,temp->right->val));
                    q.push(make_pair(temp->right,x+1));
                }
            }
            y++;
        }
        vector<vector<int> > vec;
        vector<int> temp;
        for(auto it:mp){
            temp.clear();
            sort(it.second.begin(),it.second.end());
            for(pair<int,int> i:it.second){
                temp.push_back(i.second);
            }
            vec.push_back(temp);
        }
        return vec;
    }
};
