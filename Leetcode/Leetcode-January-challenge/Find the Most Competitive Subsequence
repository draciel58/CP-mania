class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        int n = nums.size();
        stack<int> st;
        int elements_in_stack=0;
        for(int i=0;i<n;i++){
            if(st.empty()){
                st.push(nums[i]);
                elements_in_stack++;
            }
            else if(st.top()<=nums[i]){
                st.push(nums[i]);
                elements_in_stack++;
            }
            else{
                while(!st.empty()&&st.top()>nums[i]&&n-i-1>=k-elements_in_stack)                 {                   
                    st.pop();
                    elements_in_stack--;
                }
                st.push(nums[i]);
                elements_in_stack++;
            }
        }
        vector<int> ans;
        while(!st.empty()){
            ans.push_back(st.top());
            st.pop();
        }
        vector<int> first_k;
        for(int i=ans.size()-1;k>0;i--){
            first_k.push_back(ans[i]);
            k--;
        }
        return first_k;
    }
};
